---
// Componente de chat para la página de detalles del club
interface Props {
  clubId: string;
}

const { clubId } = Astro.props;
---

<div class="chat-container" data-club-id={clubId}>
  <div class="messages-container h-60 md:h-80 overflow-y-auto p-4 bg-gray-50 dark:bg-gray-900 rounded-lg mb-4" id="messages-container">
    <div class="flex justify-center">
      <div class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-1 rounded-lg text-sm">
        Cargando mensajes...
      </div>
    </div>
  </div>
  
  <form id="chat-form" class="flex gap-2">
    <div class="relative flex-grow">
      <input
        type="text"
        id="message-input"
        class="w-full p-4 pl-4 text-sm text-gray-900 bg-white border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white"
        placeholder="Escribe un mensaje..."
        required
      />
    </div>
    <button
      type="submit"
      class="inline-flex justify-center p-2 text-blue-600 rounded-full cursor-pointer hover:bg-blue-100 dark:text-blue-500 dark:hover:bg-gray-700"
    >
      <svg
        class="w-6 h-6 rotate-90"
        fill="currentColor"
        viewBox="0 0 20 20"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"
        ></path>
      </svg>
    </button>
  </form>
</div>

<script define:vars={{ clubId }}>
  // Estructura de mensajes
  class Message {
    constructor(id, userName, text, timestamp) {
      this.id = id;
      this.userName = userName;
      this.text = text;
      this.timestamp = timestamp;
    }
  }

  // Manejador del chat
  class ChatHandler {
    constructor(clubId) {
      this.clubId = clubId;
      this.messages = [];
      this.currentUser = this.getOrCreateUser();
      this.messagesContainer = document.getElementById('messages-container');
      this.messageInput = document.getElementById('message-input');
      this.chatForm = document.getElementById('chat-form');
      
      this.loadMessages();
      this.setupEventListeners();
      this.renderMessages();
    }
    
    // Generar o recuperar nombre de usuario
    getOrCreateUser() {
      let user = localStorage.getItem('chatUserName');
      if (!user) {
        const randomNum = Math.floor(Math.random() * 1000);
        user = `Usuario${randomNum}`;
        localStorage.setItem('chatUserName', user);
      }
      return user;
    }
    
    // Cargar mensajes del localStorage
    loadMessages() {
      const storedMessages = localStorage.getItem(`chat_${this.clubId}`);
      if (storedMessages) {
        this.messages = JSON.parse(storedMessages);
      } else {
        // Mensajes iniciales si no hay ninguno
        this.messages = [
          new Message(
            'system-1',
            'Sistema',
            '¡Bienvenido al chat del grupo! Aquí puedes interactuar con otros miembros.',
            new Date().toISOString()
          )
        ];
        this.saveMessages();
      }
    }
    
    // Guardar mensajes en localStorage
    saveMessages() {
      localStorage.setItem(`chat_${this.clubId}`, JSON.stringify(this.messages));
    }
    
    // Agregar un nuevo mensaje
    addMessage(text) {
      const newMessage = new Message(
        `msg-${Date.now()}`,
        this.currentUser,
        text,
        new Date().toISOString()
      );
      
      this.messages.push(newMessage);
      
      // Limitar a 100 mensajes
      if (this.messages.length > 100) {
        this.messages = this.messages.slice(-100);
      }
      
      this.saveMessages();
      this.renderMessages();
    }
    
    // Renderizar mensajes en el contenedor
    renderMessages() {
      if (!this.messagesContainer) return;
      
      this.messagesContainer.innerHTML = '';
      
      if (this.messages.length === 0) {
        this.messagesContainer.innerHTML = `
          <div class="flex justify-center">
            <div class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-1 rounded-lg text-sm">
              No hay mensajes aún. ¡Sé el primero en escribir!
            </div>
          </div>
        `;
        return;
      }
      
      this.messages.forEach(message => {
        const isCurrentUser = message.userName === this.currentUser;
        const date = new Date(message.timestamp);
        const formattedTime = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        const messageElement = document.createElement('div');
        messageElement.className = `message ${isCurrentUser ? 'current-user' : 'other-user'} mb-4`;
        
        if (message.userName === 'Sistema') {
          // Mensaje del sistema (centrado)
          messageElement.innerHTML = `
            <div class="flex justify-center">
              <div class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-3 py-1 rounded-lg text-sm">
                ${message.text}
              </div>
            </div>
          `;
        } else if (isCurrentUser) {
          // Mensaje del usuario actual (alineado a la derecha)
          messageElement.innerHTML = `
            <div class="flex justify-end">
              <div class="max-w-[75%]">
                <div class="bg-blue-500 text-white px-4 py-2 rounded-lg inline-block">
                  ${message.text}
                </div>
                <div class="text-xs text-gray-500 dark:text-gray-400 text-right mt-1">
                  ${formattedTime}
                </div>
              </div>
            </div>
          `;
        } else {
          // Mensaje de otros usuarios (alineado a la izquierda)
          messageElement.innerHTML = `
            <div class="flex justify-start">
              <div class="max-w-[75%]">
                <div class="font-semibold text-xs text-gray-700 dark:text-gray-300 mb-1">
                  ${message.userName}
                </div>
                <div class="bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded-lg inline-block">
                  ${message.text}
                </div>
                <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                  ${formattedTime}
                </div>
              </div>
            </div>
          `;
        }
        
        this.messagesContainer.appendChild(messageElement);
      });
      
      // Desplazar al último mensaje
      this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    }
    
    // Configurar event listeners
    setupEventListeners() {
      if (this.chatForm) {
        this.chatForm.addEventListener('submit', (e) => {
          e.preventDefault();
          if (this.messageInput && this.messageInput.value.trim()) {
            this.addMessage(this.messageInput.value.trim());
            this.messageInput.value = '';
          }
        });
      }
    }
  }

  // Inicializar el chat cuando se carga el documento
  document.addEventListener('DOMContentLoaded', () => {
    const chat = new ChatHandler(clubId);
  });
</script>

<style>
  /* Estilos adicionales para el chat */
  .messages-container::-webkit-scrollbar {
    width: 6px;
  }
  
  .messages-container::-webkit-scrollbar-track {
    background: rgba(0,0,0,0.1);
    border-radius: 10px;
  }
  
  .messages-container::-webkit-scrollbar-thumb {
    background: rgba(0,0,0,0.2);
    border-radius: 10px;
  }
  
  .messages-container::-webkit-scrollbar-thumb:hover {
    background: rgba(0,0,0,0.3);
  }
</style> 